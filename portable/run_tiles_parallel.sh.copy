#!/bin/bash

# First argument: number of parallel processes to be executed

A_test_data_location="test_data/2016/LOD1-Nordrhein-Westfalen/"
B_test_data_location="test_data/2018/LOD1-Nordrhein-Westfalen/"

# Init file arrays with full file names (with path and extension)
A_files=($A_test_data_location*.gml)
A_total_number=${#A_files[@]}
B_files=($B_test_data_location*.gml)
B_total_number=${#B_files[@]}

# A_matched, B_matched contain matched tile files (without path)
A_matched=()
B_matched=()

# A_only, B_only contain tile files (without path) only in the respective datasets
A_only=()
B_only=()

timestamp() {
  date +"%T"
}

# Store matched tiles first
AB_count_matched=0
for A in $A_test_data_location*.gml; do
	A_without_path="${A##*/}"
	A_without_ext="${A_without_path%.*}"
	#for B in $B_files; do
	for B in $B_test_data_location*.gml; do
		B_without_path="${B##*/}"
		B_without_ext="${B_without_path%.*}"
		B_without_suffix="${B_without_ext/_NW/}"
		if [ $B_without_suffix == $A_without_ext ]; then
			A_matched+=($A_without_path)
			B_matched+=($B_without_path)
			A_files=( ${A_files[@]/$A} )
			B_files=( ${B_files[@]/$B} )
			AB_count_matched=$((AB_count_matched+1))
			echo Found $AB_count_matched matched tiles
			break
		fi
	done
done

# Remaining files in A_files are only in old datasets
for A in "${A_files[@]}"; do
	A_without_path="${A##*/}"
	A_only+=($A_without_path)
done

# Remaining files in B_files are only in new datasets
for B in "${B_files[@]}"; do
	B_without_path="${B##*/}"
	B_only+=($B_without_path)
done

################################################################################
# MATCHED TILES
echo $(timestamp) MATCHING TILES IN BOTH OLD AND NEW DATASETS

# Split main file arrays into smaller arrays for parallel execution
AB_matched_size=${#A_matched[@]} # A_matched and B_matched have the same length
AB_matched_sub_size=$(($AB_matched_size/$1)) # The result is a (rounded) integer
for ((AB_i=0; AB_i < AB_matched_size; AB_i+=AB_matched_sub_size)); do
    	A_matched_sub=( "${A_matched[@]:AB_i:AB_matched_sub_size}" )
    	B_matched_sub=( "${B_matched[@]:AB_i:AB_matched_sub_size}" )

	# Execute in parallel
	# Argument "$A_matched_sub" only gives the first element -> use "${A_matched_sub[@]}"
	A_arg=$( IFS=$','; echo "${A_matched_sub[*]}" )
	B_arg=$( IFS=$','; echo "${B_matched_sub[*]}" )
	./run_tiles_matched.sh "$A_arg" "$B_arg" &	
done

wait

################################################################################
# MAP TILES ONLY IN OLD DATASETS
echo $(timestamp) MAPPING TILES ONLY IN OLD DATASETS

# Split main file arrays into smaller arrays for parallel execution
A_only_size=${#A_only[@]}
A_only_sub_size=$(($A_only_size/$1)) # The result is a (rounded) integer
if [ $A_only_sub_size == 0 ]; then
	A_only_sub_size=1
fi
for ((A_i=0; A_i < A_only_size; A_i+=A_only_sub_size)); do
    	A_only_sub=( "${A_only[@]:A_i:A_only_sub_size}" )

	# Execute in parallel
	A_arg=$( IFS=$','; echo "${A_only_sub[*]}" )
	./run_tiles_only_in_old.sh "$A_arg" &	
done

wait

################################################################################
# MAP TILES ONLY IN NEW DATASETS
echo $(timestamp) MAPPING TILES ONLY IN NEW DATASETS

# Split main file arrays into smaller arrays for parallel execution
B_only_size=${#B_only[@]}
B_only_sub_size=$(($B_only_size/$1)) # The result is a (rounded) integer
if [ $B_only_sub_size == 0 ]; then
	B_only_sub_size=1
fi
for ((B_i=0; B_i < B_only_size; B_i+=B_only_sub_size)); do
    	B_only_sub=( "${B_only[@]:B_i:B_only_sub_size}" )

	# Execute in parallel
	B_arg=$( IFS=$','; echo "${B_only_sub[*]}" )
	#./run_tiles_only_in_new.sh "${B_only_sub[@]}" &	
	./run_tiles_only_in_new.sh "$B_arg" &	
done

wait

echo $(timestamp) DONE.
read -p "Press enter to continue"

